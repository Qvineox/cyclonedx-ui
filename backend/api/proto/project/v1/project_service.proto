syntax = "proto3";

package cyclonedx_ui.project.v1;

option go_package = "github.com/Qvineox/cyclonedx-ui/gen/go/api/proto/project/v1;project_v1";

import "google/api/annotations.proto";

import "api/proto/project/v1/project.proto";
import "api/proto/project/v1/revision.proto";

service ProjectService {
  rpc GetProjectsByQueryFilter(ProjectsQueryFilter) returns (ProjectsList) {
    option (google.api.http) = {
      get: "/api/v1/projects"
    };
  };

  rpc GetProject(ProjectsQueryFilter) returns (Project) {
    option (google.api.http) = {
      get: "/api/v1/projects/{id}",
      additional_bindings: [
        {
          get: "/api/v1/projects/{slug}",
        }
      ]
    };
  };

  rpc CreateProject(Project) returns (Project) {
    option (google.api.http) = {
      put: "/api/v1/projects",
      body: "*"
    };
  };

  rpc UpdateProject(Project) returns (Project) {
    option (google.api.http) = {
      patch: "/api/v1/projects/{id}",
      body: "*"
    };
  };

  rpc GetProjectRevision(ProjectRevisionQuery) returns (Revision) {
    option (google.api.http) = {
      get: "/api/v1/projects/{project_id}/{revision_id}"
      additional_bindings: [
        {
          get: "/api/v1/projects/{project_slug}/{revision_id}"
        }
      ]
    };
  }

  rpc UpdateProjectRevision(Revision) returns (Project) {
    option (google.api.http) = {
      patch: "/api/v1/projects/{project_id}/{id}",
      body: "*",
    };
  };
}

message ProjectsQueryFilter {
  uint64 id = 1;

  string name = 2;
  string slug = 3;

  repeated string tags = 4;

  optional uint64 offset = 5;
  optional uint64 limit = 6;
}

message ProjectsList {
  repeated Project list = 1;
}

message ProjectRevisionQuery {
  oneof project_uid {
    uint64 project_id = 1;
    string project_slug = 2;
  }

  uint64 revision_id = 3;
}

message ProjectCreateOptions {

}