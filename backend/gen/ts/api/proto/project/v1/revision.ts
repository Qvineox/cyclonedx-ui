// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/project/v1/revision.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";

export const protobufPackage = "cyclonedx_ui.project.v1";

export interface Revision {
  id: number;
  name?: string | undefined;
  tags: string[];
  projectId: number;
  /** used to create new projects */
  projectSlug: string;
  gitTags: string[];
  gitBranches: string[];
  gitCommitHash?: string | undefined;
  vcsUrl?: string | undefined;
  createdBy?: string | undefined;
  sbomFileUuid?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

function createBaseRevision(): Revision {
  return {
    id: 0,
    name: undefined,
    tags: [],
    projectId: 0,
    projectSlug: "",
    gitTags: [],
    gitBranches: [],
    gitCommitHash: undefined,
    vcsUrl: undefined,
    createdBy: undefined,
    sbomFileUuid: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Revision: MessageFns<Revision> = {
  encode(message: Revision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    if (message.projectId !== 0) {
      writer.uint32(32).uint64(message.projectId);
    }
    if (message.projectSlug !== "") {
      writer.uint32(42).string(message.projectSlug);
    }
    for (const v of message.gitTags) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.gitBranches) {
      writer.uint32(58).string(v!);
    }
    if (message.gitCommitHash !== undefined) {
      writer.uint32(66).string(message.gitCommitHash);
    }
    if (message.vcsUrl !== undefined) {
      writer.uint32(74).string(message.vcsUrl);
    }
    if (message.createdBy !== undefined) {
      writer.uint32(82).string(message.createdBy);
    }
    if (message.sbomFileUuid !== undefined) {
      writer.uint32(90).string(message.sbomFileUuid);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.projectId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.projectSlug = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gitTags.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.gitBranches.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.gitCommitHash = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.vcsUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdBy = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sbomFileUuid = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
      projectSlug: isSet(object.projectSlug) ? globalThis.String(object.projectSlug) : "",
      gitTags: globalThis.Array.isArray(object?.gitTags) ? object.gitTags.map((e: any) => globalThis.String(e)) : [],
      gitBranches: globalThis.Array.isArray(object?.gitBranches)
        ? object.gitBranches.map((e: any) => globalThis.String(e))
        : [],
      gitCommitHash: isSet(object.gitCommitHash) ? globalThis.String(object.gitCommitHash) : undefined,
      vcsUrl: isSet(object.vcsUrl) ? globalThis.String(object.vcsUrl) : undefined,
      createdBy: isSet(object.createdBy) ? globalThis.String(object.createdBy) : undefined,
      sbomFileUuid: isSet(object.sbomFileUuid) ? globalThis.String(object.sbomFileUuid) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Revision): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.projectId !== 0) {
      obj.projectId = Math.round(message.projectId);
    }
    if (message.projectSlug !== "") {
      obj.projectSlug = message.projectSlug;
    }
    if (message.gitTags?.length) {
      obj.gitTags = message.gitTags;
    }
    if (message.gitBranches?.length) {
      obj.gitBranches = message.gitBranches;
    }
    if (message.gitCommitHash !== undefined) {
      obj.gitCommitHash = message.gitCommitHash;
    }
    if (message.vcsUrl !== undefined) {
      obj.vcsUrl = message.vcsUrl;
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = message.createdBy;
    }
    if (message.sbomFileUuid !== undefined) {
      obj.sbomFileUuid = message.sbomFileUuid;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Revision>, I>>(base?: I): Revision {
    return Revision.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Revision>, I>>(object: I): Revision {
    const message = createBaseRevision();
    message.id = object.id ?? 0;
    message.name = object.name ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.projectId = object.projectId ?? 0;
    message.projectSlug = object.projectSlug ?? "";
    message.gitTags = object.gitTags?.map((e) => e) || [];
    message.gitBranches = object.gitBranches?.map((e) => e) || [];
    message.gitCommitHash = object.gitCommitHash ?? undefined;
    message.vcsUrl = object.vcsUrl ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.sbomFileUuid = object.sbomFileUuid ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
