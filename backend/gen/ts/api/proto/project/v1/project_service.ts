// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/project/v1/project_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Project } from "./project";
import { Revision } from "./revision";

export const protobufPackage = "cyclonedx_ui.project.v1";

export interface ProjectsQueryFilter {
  id?: number | undefined;
  slug?: string | undefined;
  name: string;
  tags: string[];
  offset?: number | undefined;
  limit?: number | undefined;
}

export interface ProjectsList {
  list: Project[];
}

export interface ProjectRevisionQuery {
  projectId?: number | undefined;
  projectSlug?: string | undefined;
  revisionId: number;
}

export interface ProjectCreateOptions {
}

function createBaseProjectsQueryFilter(): ProjectsQueryFilter {
  return { id: undefined, slug: undefined, name: "", tags: [], offset: undefined, limit: undefined };
}

export const ProjectsQueryFilter: MessageFns<ProjectsQueryFilter> = {
  encode(message: ProjectsQueryFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.slug !== undefined) {
      writer.uint32(18).string(message.slug);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    if (message.offset !== undefined) {
      writer.uint32(40).uint64(message.offset);
    }
    if (message.limit !== undefined) {
      writer.uint32(48).uint64(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectsQueryFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectsQueryFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.offset = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.limit = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectsQueryFilter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
    };
  },

  toJSON(message: ProjectsQueryFilter): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== undefined) {
      obj.slug = message.slug;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.offset !== undefined) {
      obj.offset = Math.round(message.offset);
    }
    if (message.limit !== undefined) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectsQueryFilter>, I>>(base?: I): ProjectsQueryFilter {
    return ProjectsQueryFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectsQueryFilter>, I>>(object: I): ProjectsQueryFilter {
    const message = createBaseProjectsQueryFilter();
    message.id = object.id ?? undefined;
    message.slug = object.slug ?? undefined;
    message.name = object.name ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.offset = object.offset ?? undefined;
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseProjectsList(): ProjectsList {
  return { list: [] };
}

export const ProjectsList: MessageFns<ProjectsList> = {
  encode(message: ProjectsList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.list) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectsList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectsList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list.push(Project.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectsList {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => Project.fromJSON(e)) : [] };
  },

  toJSON(message: ProjectsList): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectsList>, I>>(base?: I): ProjectsList {
    return ProjectsList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectsList>, I>>(object: I): ProjectsList {
    const message = createBaseProjectsList();
    message.list = object.list?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProjectRevisionQuery(): ProjectRevisionQuery {
  return { projectId: undefined, projectSlug: undefined, revisionId: 0 };
}

export const ProjectRevisionQuery: MessageFns<ProjectRevisionQuery> = {
  encode(message: ProjectRevisionQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== undefined) {
      writer.uint32(8).uint64(message.projectId);
    }
    if (message.projectSlug !== undefined) {
      writer.uint32(18).string(message.projectSlug);
    }
    if (message.revisionId !== 0) {
      writer.uint32(24).uint64(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectRevisionQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectRevisionQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.projectId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectSlug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.revisionId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectRevisionQuery {
    return {
      projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : undefined,
      projectSlug: isSet(object.projectSlug) ? globalThis.String(object.projectSlug) : undefined,
      revisionId: isSet(object.revisionId) ? globalThis.Number(object.revisionId) : 0,
    };
  },

  toJSON(message: ProjectRevisionQuery): unknown {
    const obj: any = {};
    if (message.projectId !== undefined) {
      obj.projectId = Math.round(message.projectId);
    }
    if (message.projectSlug !== undefined) {
      obj.projectSlug = message.projectSlug;
    }
    if (message.revisionId !== 0) {
      obj.revisionId = Math.round(message.revisionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectRevisionQuery>, I>>(base?: I): ProjectRevisionQuery {
    return ProjectRevisionQuery.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectRevisionQuery>, I>>(object: I): ProjectRevisionQuery {
    const message = createBaseProjectRevisionQuery();
    message.projectId = object.projectId ?? undefined;
    message.projectSlug = object.projectSlug ?? undefined;
    message.revisionId = object.revisionId ?? 0;
    return message;
  },
};

function createBaseProjectCreateOptions(): ProjectCreateOptions {
  return {};
}

export const ProjectCreateOptions: MessageFns<ProjectCreateOptions> = {
  encode(_: ProjectCreateOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectCreateOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectCreateOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProjectCreateOptions {
    return {};
  },

  toJSON(_: ProjectCreateOptions): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectCreateOptions>, I>>(base?: I): ProjectCreateOptions {
    return ProjectCreateOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectCreateOptions>, I>>(_: I): ProjectCreateOptions {
    const message = createBaseProjectCreateOptions();
    return message;
  },
};

export interface ProjectService {
  GetProjectsByQueryFilter(request: ProjectsQueryFilter): Promise<ProjectsList>;
  GetProject(request: ProjectsQueryFilter): Promise<Project>;
  CreateProject(request: Project): Promise<Project>;
  UpdateProject(request: Project): Promise<Project>;
  GetProjectRevision(request: ProjectRevisionQuery): Promise<Revision>;
  UpdateProjectRevision(request: Revision): Promise<Revision>;
}

export const ProjectServiceServiceName = "cyclonedx_ui.project.v1.ProjectService";
export class ProjectServiceClientImpl implements ProjectService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProjectServiceServiceName;
    this.rpc = rpc;
    this.GetProjectsByQueryFilter = this.GetProjectsByQueryFilter.bind(this);
    this.GetProject = this.GetProject.bind(this);
    this.CreateProject = this.CreateProject.bind(this);
    this.UpdateProject = this.UpdateProject.bind(this);
    this.GetProjectRevision = this.GetProjectRevision.bind(this);
    this.UpdateProjectRevision = this.UpdateProjectRevision.bind(this);
  }
  GetProjectsByQueryFilter(request: ProjectsQueryFilter): Promise<ProjectsList> {
    const data = ProjectsQueryFilter.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjectsByQueryFilter", data);
    return promise.then((data) => ProjectsList.decode(new BinaryReader(data)));
  }

  GetProject(request: ProjectsQueryFilter): Promise<Project> {
    const data = ProjectsQueryFilter.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProject", data);
    return promise.then((data) => Project.decode(new BinaryReader(data)));
  }

  CreateProject(request: Project): Promise<Project> {
    const data = Project.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProject", data);
    return promise.then((data) => Project.decode(new BinaryReader(data)));
  }

  UpdateProject(request: Project): Promise<Project> {
    const data = Project.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProject", data);
    return promise.then((data) => Project.decode(new BinaryReader(data)));
  }

  GetProjectRevision(request: ProjectRevisionQuery): Promise<Revision> {
    const data = ProjectRevisionQuery.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjectRevision", data);
    return promise.then((data) => Revision.decode(new BinaryReader(data)));
  }

  UpdateProjectRevision(request: Revision): Promise<Revision> {
    const data = Revision.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProjectRevision", data);
    return promise.then((data) => Revision.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
