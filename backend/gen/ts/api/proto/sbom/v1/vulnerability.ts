// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/sbom/v1/vulnerability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";

export const protobufPackage = "cyclonedx_ui.sbom.v1";

export interface Vulnerability {
  id: string;
  source?: Source | undefined;
  description: string;
  detail: string;
  recommendation: string;
  maxRating?: number | undefined;
  ratings: Rating[];
  cwes: number[];
  advisories: Advisory[];
  affects: Affect[];
  createdAt?: Date | undefined;
  publishedAt?: Date | undefined;
  updatedAt?: Date | undefined;
  rejectedAt?: Date | undefined;
}

export interface Rating {
  source?: Source | undefined;
  score?: number | undefined;
  severity: string;
  method: string;
  vector: string;
  justification: string;
}

export interface Source {
  source: string;
  url: string;
}

export interface Advisory {
  title: string;
  url: string;
}

export interface Affect {
  ref: string;
  ranges: Range[];
}

export interface Range {
  version: string;
  range: string;
  status: string;
}

function createBaseVulnerability(): Vulnerability {
  return {
    id: "",
    source: undefined,
    description: "",
    detail: "",
    recommendation: "",
    maxRating: undefined,
    ratings: [],
    cwes: [],
    advisories: [],
    affects: [],
    createdAt: undefined,
    publishedAt: undefined,
    updatedAt: undefined,
    rejectedAt: undefined,
  };
}

export const Vulnerability: MessageFns<Vulnerability> = {
  encode(message: Vulnerability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.source !== undefined) {
      Source.encode(message.source, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.detail !== "") {
      writer.uint32(34).string(message.detail);
    }
    if (message.recommendation !== "") {
      writer.uint32(42).string(message.recommendation);
    }
    if (message.maxRating !== undefined) {
      writer.uint32(53).float(message.maxRating);
    }
    for (const v of message.ratings) {
      Rating.encode(v!, writer.uint32(58).fork()).join();
    }
    writer.uint32(66).fork();
    for (const v of message.cwes) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.advisories) {
      Advisory.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.affects) {
      Affect.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(98).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    if (message.rejectedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.rejectedAt), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.source = Source.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.detail = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recommendation = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.maxRating = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ratings.push(Rating.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.cwes.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.cwes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.advisories.push(Advisory.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.affects.push(Affect.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.rejectedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      source: isSet(object.source) ? Source.fromJSON(object.source) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      recommendation: isSet(object.recommendation) ? globalThis.String(object.recommendation) : "",
      maxRating: isSet(object.maxRating) ? globalThis.Number(object.maxRating) : undefined,
      ratings: globalThis.Array.isArray(object?.ratings) ? object.ratings.map((e: any) => Rating.fromJSON(e)) : [],
      cwes: globalThis.Array.isArray(object?.cwes) ? object.cwes.map((e: any) => globalThis.Number(e)) : [],
      advisories: globalThis.Array.isArray(object?.advisories)
        ? object.advisories.map((e: any) => Advisory.fromJSON(e))
        : [],
      affects: globalThis.Array.isArray(object?.affects) ? object.affects.map((e: any) => Affect.fromJSON(e)) : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      rejectedAt: isSet(object.rejectedAt) ? fromJsonTimestamp(object.rejectedAt) : undefined,
    };
  },

  toJSON(message: Vulnerability): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.source !== undefined) {
      obj.source = Source.toJSON(message.source);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.recommendation !== "") {
      obj.recommendation = message.recommendation;
    }
    if (message.maxRating !== undefined) {
      obj.maxRating = message.maxRating;
    }
    if (message.ratings?.length) {
      obj.ratings = message.ratings.map((e) => Rating.toJSON(e));
    }
    if (message.cwes?.length) {
      obj.cwes = message.cwes.map((e) => Math.round(e));
    }
    if (message.advisories?.length) {
      obj.advisories = message.advisories.map((e) => Advisory.toJSON(e));
    }
    if (message.affects?.length) {
      obj.affects = message.affects.map((e) => Affect.toJSON(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.rejectedAt !== undefined) {
      obj.rejectedAt = message.rejectedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vulnerability>, I>>(base?: I): Vulnerability {
    return Vulnerability.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vulnerability>, I>>(object: I): Vulnerability {
    const message = createBaseVulnerability();
    message.id = object.id ?? "";
    message.source = (object.source !== undefined && object.source !== null)
      ? Source.fromPartial(object.source)
      : undefined;
    message.description = object.description ?? "";
    message.detail = object.detail ?? "";
    message.recommendation = object.recommendation ?? "";
    message.maxRating = object.maxRating ?? undefined;
    message.ratings = object.ratings?.map((e) => Rating.fromPartial(e)) || [];
    message.cwes = object.cwes?.map((e) => e) || [];
    message.advisories = object.advisories?.map((e) => Advisory.fromPartial(e)) || [];
    message.affects = object.affects?.map((e) => Affect.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.publishedAt = object.publishedAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.rejectedAt = object.rejectedAt ?? undefined;
    return message;
  },
};

function createBaseRating(): Rating {
  return { source: undefined, score: undefined, severity: "", method: "", vector: "", justification: "" };
}

export const Rating: MessageFns<Rating> = {
  encode(message: Rating, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      Source.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.score !== undefined) {
      writer.uint32(21).float(message.score);
    }
    if (message.severity !== "") {
      writer.uint32(26).string(message.severity);
    }
    if (message.method !== "") {
      writer.uint32(34).string(message.method);
    }
    if (message.vector !== "") {
      writer.uint32(42).string(message.vector);
    }
    if (message.justification !== "") {
      writer.uint32(50).string(message.justification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rating {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRating();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = Source.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.score = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.severity = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.vector = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.justification = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rating {
    return {
      source: isSet(object.source) ? Source.fromJSON(object.source) : undefined,
      score: isSet(object.score) ? globalThis.Number(object.score) : undefined,
      severity: isSet(object.severity) ? globalThis.String(object.severity) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      vector: isSet(object.vector) ? globalThis.String(object.vector) : "",
      justification: isSet(object.justification) ? globalThis.String(object.justification) : "",
    };
  },

  toJSON(message: Rating): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = Source.toJSON(message.source);
    }
    if (message.score !== undefined) {
      obj.score = message.score;
    }
    if (message.severity !== "") {
      obj.severity = message.severity;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.vector !== "") {
      obj.vector = message.vector;
    }
    if (message.justification !== "") {
      obj.justification = message.justification;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Rating>, I>>(base?: I): Rating {
    return Rating.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Rating>, I>>(object: I): Rating {
    const message = createBaseRating();
    message.source = (object.source !== undefined && object.source !== null)
      ? Source.fromPartial(object.source)
      : undefined;
    message.score = object.score ?? undefined;
    message.severity = object.severity ?? "";
    message.method = object.method ?? "";
    message.vector = object.vector ?? "";
    message.justification = object.justification ?? "";
    return message;
  },
};

function createBaseSource(): Source {
  return { source: "", url: "" };
}

export const Source: MessageFns<Source> = {
  encode(message: Source, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Source {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Source {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: Source): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Source>, I>>(base?: I): Source {
    return Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Source>, I>>(object: I): Source {
    const message = createBaseSource();
    message.source = object.source ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseAdvisory(): Advisory {
  return { title: "", url: "" };
}

export const Advisory: MessageFns<Advisory> = {
  encode(message: Advisory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Advisory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdvisory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Advisory {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: Advisory): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Advisory>, I>>(base?: I): Advisory {
    return Advisory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Advisory>, I>>(object: I): Advisory {
    const message = createBaseAdvisory();
    message.title = object.title ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseAffect(): Affect {
  return { ref: "", ranges: [] };
}

export const Affect: MessageFns<Affect> = {
  encode(message: Affect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ref !== "") {
      writer.uint32(10).string(message.ref);
    }
    for (const v of message.ranges) {
      Range.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Affect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAffect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ref = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ranges.push(Range.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Affect {
    return {
      ref: isSet(object.ref) ? globalThis.String(object.ref) : "",
      ranges: globalThis.Array.isArray(object?.ranges) ? object.ranges.map((e: any) => Range.fromJSON(e)) : [],
    };
  },

  toJSON(message: Affect): unknown {
    const obj: any = {};
    if (message.ref !== "") {
      obj.ref = message.ref;
    }
    if (message.ranges?.length) {
      obj.ranges = message.ranges.map((e) => Range.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Affect>, I>>(base?: I): Affect {
    return Affect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Affect>, I>>(object: I): Affect {
    const message = createBaseAffect();
    message.ref = object.ref ?? "";
    message.ranges = object.ranges?.map((e) => Range.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRange(): Range {
  return { version: "", range: "", status: "" };
}

export const Range: MessageFns<Range> = {
  encode(message: Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.range !== "") {
      writer.uint32(18).string(message.range);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.range = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Range {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      range: isSet(object.range) ? globalThis.String(object.range) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: Range): unknown {
    const obj: any = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.range !== "") {
      obj.range = message.range;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Range>, I>>(base?: I): Range {
    return Range.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Range>, I>>(object: I): Range {
    const message = createBaseRange();
    message.version = object.version ?? "";
    message.range = object.range ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
