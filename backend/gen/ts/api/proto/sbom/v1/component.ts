// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/sbom/v1/component.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Vulnerability } from "./vulnerability";

export const protobufPackage = "cyclonedx_ui.sbom.v1";

export interface Component {
  name: string;
  group: string;
  version: string;
  description: string;
  type: string;
  level: number;
  bomRef: string;
  purl?: string | undefined;
  children: Component[];
  vulnerabilities: Vulnerability[];
  hasTransitiveVulns: boolean;
  maxSeverity: number;
  totalCveCount: number;
}

function createBaseComponent(): Component {
  return {
    name: "",
    group: "",
    version: "",
    description: "",
    type: "",
    level: 0,
    bomRef: "",
    purl: undefined,
    children: [],
    vulnerabilities: [],
    hasTransitiveVulns: false,
    maxSeverity: 0,
    totalCveCount: 0,
  };
}

export const Component: MessageFns<Component> = {
  encode(message: Component, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.group !== "") {
      writer.uint32(18).string(message.group);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.type !== "") {
      writer.uint32(42).string(message.type);
    }
    if (message.level !== 0) {
      writer.uint32(48).int32(message.level);
    }
    if (message.bomRef !== "") {
      writer.uint32(58).string(message.bomRef);
    }
    if (message.purl !== undefined) {
      writer.uint32(66).string(message.purl);
    }
    for (const v of message.children) {
      Component.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.vulnerabilities) {
      Vulnerability.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.hasTransitiveVulns !== false) {
      writer.uint32(88).bool(message.hasTransitiveVulns);
    }
    if (message.maxSeverity !== 0) {
      writer.uint32(101).float(message.maxSeverity);
    }
    if (message.totalCveCount !== 0) {
      writer.uint32(104).int32(message.totalCveCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Component {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bomRef = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.purl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.children.push(Component.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.vulnerabilities.push(Vulnerability.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.hasTransitiveVulns = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 101) {
            break;
          }

          message.maxSeverity = reader.float();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.totalCveCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Component {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      group: isSet(object.group) ? globalThis.String(object.group) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      bomRef: isSet(object.bomRef) ? globalThis.String(object.bomRef) : "",
      purl: isSet(object.purl) ? globalThis.String(object.purl) : undefined,
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => Component.fromJSON(e))
        : [],
      vulnerabilities: globalThis.Array.isArray(object?.vulnerabilities)
        ? object.vulnerabilities.map((e: any) => Vulnerability.fromJSON(e))
        : [],
      hasTransitiveVulns: isSet(object.hasTransitiveVulns) ? globalThis.Boolean(object.hasTransitiveVulns) : false,
      maxSeverity: isSet(object.maxSeverity) ? globalThis.Number(object.maxSeverity) : 0,
      totalCveCount: isSet(object.totalCveCount) ? globalThis.Number(object.totalCveCount) : 0,
    };
  },

  toJSON(message: Component): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.bomRef !== "") {
      obj.bomRef = message.bomRef;
    }
    if (message.purl !== undefined) {
      obj.purl = message.purl;
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => Component.toJSON(e));
    }
    if (message.vulnerabilities?.length) {
      obj.vulnerabilities = message.vulnerabilities.map((e) => Vulnerability.toJSON(e));
    }
    if (message.hasTransitiveVulns !== false) {
      obj.hasTransitiveVulns = message.hasTransitiveVulns;
    }
    if (message.maxSeverity !== 0) {
      obj.maxSeverity = message.maxSeverity;
    }
    if (message.totalCveCount !== 0) {
      obj.totalCveCount = Math.round(message.totalCveCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Component>, I>>(base?: I): Component {
    return Component.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Component>, I>>(object: I): Component {
    const message = createBaseComponent();
    message.name = object.name ?? "";
    message.group = object.group ?? "";
    message.version = object.version ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? "";
    message.level = object.level ?? 0;
    message.bomRef = object.bomRef ?? "";
    message.purl = object.purl ?? undefined;
    message.children = object.children?.map((e) => Component.fromPartial(e)) || [];
    message.vulnerabilities = object.vulnerabilities?.map((e) => Vulnerability.fromPartial(e)) || [];
    message.hasTransitiveVulns = object.hasTransitiveVulns ?? false;
    message.maxSeverity = object.maxSeverity ?? 0;
    message.totalCveCount = object.totalCveCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
