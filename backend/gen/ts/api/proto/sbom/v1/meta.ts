// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/sbom/v1/meta.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { Component } from "./component";

export const protobufPackage = "cyclonedx_ui.sbom.v1";

export interface Meta {
  bomVersion: string;
  tools: Component[];
  project?: Component | undefined;
  authors: Contact[];
  lifecycles: Lifecycle[];
  properties: { [key: string]: string };
  createdAt?: Date | undefined;
}

export interface Meta_PropertiesEntry {
  key: string;
  value: string;
}

export interface Lifecycle {
  phase: string;
  name: string;
  description: string;
}

export interface Contact {
  email: string;
  name: string;
  phone: string;
  bomRef: string;
}

function createBaseMeta(): Meta {
  return {
    bomVersion: "",
    tools: [],
    project: undefined,
    authors: [],
    lifecycles: [],
    properties: {},
    createdAt: undefined,
  };
}

export const Meta: MessageFns<Meta> = {
  encode(message: Meta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bomVersion !== "") {
      writer.uint32(10).string(message.bomVersion);
    }
    for (const v of message.tools) {
      Component.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.project !== undefined) {
      Component.encode(message.project, writer.uint32(26).fork()).join();
    }
    for (const v of message.authors) {
      Contact.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.lifecycles) {
      Lifecycle.encode(v!, writer.uint32(42).fork()).join();
    }
    Object.entries(message.properties).forEach(([key, value]) => {
      Meta_PropertiesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Meta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bomVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tools.push(Component.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.project = Component.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.authors.push(Contact.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lifecycles.push(Lifecycle.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = Meta_PropertiesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.properties[entry6.key] = entry6.value;
          }
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Meta {
    return {
      bomVersion: isSet(object.bomVersion) ? globalThis.String(object.bomVersion) : "",
      tools: globalThis.Array.isArray(object?.tools) ? object.tools.map((e: any) => Component.fromJSON(e)) : [],
      project: isSet(object.project) ? Component.fromJSON(object.project) : undefined,
      authors: globalThis.Array.isArray(object?.authors) ? object.authors.map((e: any) => Contact.fromJSON(e)) : [],
      lifecycles: globalThis.Array.isArray(object?.lifecycles)
        ? object.lifecycles.map((e: any) => Lifecycle.fromJSON(e))
        : [],
      properties: isObject(object.properties)
        ? Object.entries(object.properties).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Meta): unknown {
    const obj: any = {};
    if (message.bomVersion !== "") {
      obj.bomVersion = message.bomVersion;
    }
    if (message.tools?.length) {
      obj.tools = message.tools.map((e) => Component.toJSON(e));
    }
    if (message.project !== undefined) {
      obj.project = Component.toJSON(message.project);
    }
    if (message.authors?.length) {
      obj.authors = message.authors.map((e) => Contact.toJSON(e));
    }
    if (message.lifecycles?.length) {
      obj.lifecycles = message.lifecycles.map((e) => Lifecycle.toJSON(e));
    }
    if (message.properties) {
      const entries = Object.entries(message.properties);
      if (entries.length > 0) {
        obj.properties = {};
        entries.forEach(([k, v]) => {
          obj.properties[k] = v;
        });
      }
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Meta>, I>>(base?: I): Meta {
    return Meta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Meta>, I>>(object: I): Meta {
    const message = createBaseMeta();
    message.bomVersion = object.bomVersion ?? "";
    message.tools = object.tools?.map((e) => Component.fromPartial(e)) || [];
    message.project = (object.project !== undefined && object.project !== null)
      ? Component.fromPartial(object.project)
      : undefined;
    message.authors = object.authors?.map((e) => Contact.fromPartial(e)) || [];
    message.lifecycles = object.lifecycles?.map((e) => Lifecycle.fromPartial(e)) || [];
    message.properties = Object.entries(object.properties ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseMeta_PropertiesEntry(): Meta_PropertiesEntry {
  return { key: "", value: "" };
}

export const Meta_PropertiesEntry: MessageFns<Meta_PropertiesEntry> = {
  encode(message: Meta_PropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Meta_PropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeta_PropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Meta_PropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Meta_PropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Meta_PropertiesEntry>, I>>(base?: I): Meta_PropertiesEntry {
    return Meta_PropertiesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Meta_PropertiesEntry>, I>>(object: I): Meta_PropertiesEntry {
    const message = createBaseMeta_PropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLifecycle(): Lifecycle {
  return { phase: "", name: "", description: "" };
}

export const Lifecycle: MessageFns<Lifecycle> = {
  encode(message: Lifecycle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phase !== "") {
      writer.uint32(10).string(message.phase);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lifecycle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLifecycle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phase = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lifecycle {
    return {
      phase: isSet(object.phase) ? globalThis.String(object.phase) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Lifecycle): unknown {
    const obj: any = {};
    if (message.phase !== "") {
      obj.phase = message.phase;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Lifecycle>, I>>(base?: I): Lifecycle {
    return Lifecycle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Lifecycle>, I>>(object: I): Lifecycle {
    const message = createBaseLifecycle();
    message.phase = object.phase ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseContact(): Contact {
  return { email: "", name: "", phone: "", bomRef: "" };
}

export const Contact: MessageFns<Contact> = {
  encode(message: Contact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.phone !== "") {
      writer.uint32(26).string(message.phone);
    }
    if (message.bomRef !== "") {
      writer.uint32(34).string(message.bomRef);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Contact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bomRef = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Contact {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      bomRef: isSet(object.bomRef) ? globalThis.String(object.bomRef) : "",
    };
  },

  toJSON(message: Contact): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.bomRef !== "") {
      obj.bomRef = message.bomRef;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Contact>, I>>(base?: I): Contact {
    return Contact.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Contact>, I>>(object: I): Contact {
    const message = createBaseContact();
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.phone = object.phone ?? "";
    message.bomRef = object.bomRef ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
