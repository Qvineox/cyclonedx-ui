// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: api/proto/sbom/v1/sbom_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Revision } from "../../project/v1/revision";
import { Component } from "./component";
import { Meta } from "./meta";
import { DependencyCycle, SBOMFiles } from "./sbom";
import { Vulnerability } from "./vulnerability";

export const protobufPackage = "cyclonedx_ui.sbom.v1";

export interface DecomposeOptions {
  fileUuid?: string | undefined;
  upload?: SBOMFiles | undefined;
  maxDepth: number;
  onlyVulnerable: boolean;
}

export interface SBOMDecomposition {
  id?: number | undefined;
  serialNumber?: string | undefined;
  md5?: string | undefined;
  metaData: Meta | undefined;
  graph: Component | undefined;
  components: Component[];
  vulnerabilities: Vulnerability[];
  totalNodes: number;
  dependencyCycles: DependencyCycle[];
}

export interface UploadOptions {
  upload: SBOMFiles | undefined;
  projectUid: string;
}

function createBaseDecomposeOptions(): DecomposeOptions {
  return { fileUuid: undefined, upload: undefined, maxDepth: 0, onlyVulnerable: false };
}

export const DecomposeOptions: MessageFns<DecomposeOptions> = {
  encode(message: DecomposeOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileUuid !== undefined) {
      writer.uint32(10).string(message.fileUuid);
    }
    if (message.upload !== undefined) {
      SBOMFiles.encode(message.upload, writer.uint32(18).fork()).join();
    }
    if (message.maxDepth !== 0) {
      writer.uint32(24).uint64(message.maxDepth);
    }
    if (message.onlyVulnerable !== false) {
      writer.uint32(32).bool(message.onlyVulnerable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DecomposeOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecomposeOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileUuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.upload = SBOMFiles.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxDepth = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.onlyVulnerable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecomposeOptions {
    return {
      fileUuid: isSet(object.fileUuid) ? globalThis.String(object.fileUuid) : undefined,
      upload: isSet(object.upload) ? SBOMFiles.fromJSON(object.upload) : undefined,
      maxDepth: isSet(object.maxDepth) ? globalThis.Number(object.maxDepth) : 0,
      onlyVulnerable: isSet(object.onlyVulnerable) ? globalThis.Boolean(object.onlyVulnerable) : false,
    };
  },

  toJSON(message: DecomposeOptions): unknown {
    const obj: any = {};
    if (message.fileUuid !== undefined) {
      obj.fileUuid = message.fileUuid;
    }
    if (message.upload !== undefined) {
      obj.upload = SBOMFiles.toJSON(message.upload);
    }
    if (message.maxDepth !== 0) {
      obj.maxDepth = Math.round(message.maxDepth);
    }
    if (message.onlyVulnerable !== false) {
      obj.onlyVulnerable = message.onlyVulnerable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DecomposeOptions>, I>>(base?: I): DecomposeOptions {
    return DecomposeOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DecomposeOptions>, I>>(object: I): DecomposeOptions {
    const message = createBaseDecomposeOptions();
    message.fileUuid = object.fileUuid ?? undefined;
    message.upload = (object.upload !== undefined && object.upload !== null)
      ? SBOMFiles.fromPartial(object.upload)
      : undefined;
    message.maxDepth = object.maxDepth ?? 0;
    message.onlyVulnerable = object.onlyVulnerable ?? false;
    return message;
  },
};

function createBaseSBOMDecomposition(): SBOMDecomposition {
  return {
    id: undefined,
    serialNumber: undefined,
    md5: undefined,
    metaData: undefined,
    graph: undefined,
    components: [],
    vulnerabilities: [],
    totalNodes: 0,
    dependencyCycles: [],
  };
}

export const SBOMDecomposition: MessageFns<SBOMDecomposition> = {
  encode(message: SBOMDecomposition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.serialNumber !== undefined) {
      writer.uint32(18).string(message.serialNumber);
    }
    if (message.md5 !== undefined) {
      writer.uint32(26).string(message.md5);
    }
    if (message.metaData !== undefined) {
      Meta.encode(message.metaData, writer.uint32(34).fork()).join();
    }
    if (message.graph !== undefined) {
      Component.encode(message.graph, writer.uint32(42).fork()).join();
    }
    for (const v of message.components) {
      Component.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.vulnerabilities) {
      Vulnerability.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.totalNodes !== 0) {
      writer.uint32(64).uint64(message.totalNodes);
    }
    for (const v of message.dependencyCycles) {
      DependencyCycle.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SBOMDecomposition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSBOMDecomposition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serialNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.md5 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metaData = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.graph = Component.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.components.push(Component.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.vulnerabilities.push(Vulnerability.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.totalNodes = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.dependencyCycles.push(DependencyCycle.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SBOMDecomposition {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      serialNumber: isSet(object.serialNumber) ? globalThis.String(object.serialNumber) : undefined,
      md5: isSet(object.md5) ? globalThis.String(object.md5) : undefined,
      metaData: isSet(object.metaData) ? Meta.fromJSON(object.metaData) : undefined,
      graph: isSet(object.graph) ? Component.fromJSON(object.graph) : undefined,
      components: globalThis.Array.isArray(object?.components)
        ? object.components.map((e: any) => Component.fromJSON(e))
        : [],
      vulnerabilities: globalThis.Array.isArray(object?.vulnerabilities)
        ? object.vulnerabilities.map((e: any) => Vulnerability.fromJSON(e))
        : [],
      totalNodes: isSet(object.totalNodes) ? globalThis.Number(object.totalNodes) : 0,
      dependencyCycles: globalThis.Array.isArray(object?.dependencyCycles)
        ? object.dependencyCycles.map((e: any) => DependencyCycle.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SBOMDecomposition): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.serialNumber !== undefined) {
      obj.serialNumber = message.serialNumber;
    }
    if (message.md5 !== undefined) {
      obj.md5 = message.md5;
    }
    if (message.metaData !== undefined) {
      obj.metaData = Meta.toJSON(message.metaData);
    }
    if (message.graph !== undefined) {
      obj.graph = Component.toJSON(message.graph);
    }
    if (message.components?.length) {
      obj.components = message.components.map((e) => Component.toJSON(e));
    }
    if (message.vulnerabilities?.length) {
      obj.vulnerabilities = message.vulnerabilities.map((e) => Vulnerability.toJSON(e));
    }
    if (message.totalNodes !== 0) {
      obj.totalNodes = Math.round(message.totalNodes);
    }
    if (message.dependencyCycles?.length) {
      obj.dependencyCycles = message.dependencyCycles.map((e) => DependencyCycle.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SBOMDecomposition>, I>>(base?: I): SBOMDecomposition {
    return SBOMDecomposition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SBOMDecomposition>, I>>(object: I): SBOMDecomposition {
    const message = createBaseSBOMDecomposition();
    message.id = object.id ?? undefined;
    message.serialNumber = object.serialNumber ?? undefined;
    message.md5 = object.md5 ?? undefined;
    message.metaData = (object.metaData !== undefined && object.metaData !== null)
      ? Meta.fromPartial(object.metaData)
      : undefined;
    message.graph = (object.graph !== undefined && object.graph !== null)
      ? Component.fromPartial(object.graph)
      : undefined;
    message.components = object.components?.map((e) => Component.fromPartial(e)) || [];
    message.vulnerabilities = object.vulnerabilities?.map((e) => Vulnerability.fromPartial(e)) || [];
    message.totalNodes = object.totalNodes ?? 0;
    message.dependencyCycles = object.dependencyCycles?.map((e) => DependencyCycle.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUploadOptions(): UploadOptions {
  return { upload: undefined, projectUid: "" };
}

export const UploadOptions: MessageFns<UploadOptions> = {
  encode(message: UploadOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upload !== undefined) {
      SBOMFiles.encode(message.upload, writer.uint32(10).fork()).join();
    }
    if (message.projectUid !== "") {
      writer.uint32(18).string(message.projectUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.upload = SBOMFiles.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectUid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadOptions {
    return {
      upload: isSet(object.upload) ? SBOMFiles.fromJSON(object.upload) : undefined,
      projectUid: isSet(object.projectUid) ? globalThis.String(object.projectUid) : "",
    };
  },

  toJSON(message: UploadOptions): unknown {
    const obj: any = {};
    if (message.upload !== undefined) {
      obj.upload = SBOMFiles.toJSON(message.upload);
    }
    if (message.projectUid !== "") {
      obj.projectUid = message.projectUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadOptions>, I>>(base?: I): UploadOptions {
    return UploadOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadOptions>, I>>(object: I): UploadOptions {
    const message = createBaseUploadOptions();
    message.upload = (object.upload !== undefined && object.upload !== null)
      ? SBOMFiles.fromPartial(object.upload)
      : undefined;
    message.projectUid = object.projectUid ?? "";
    return message;
  },
};

export interface SbomService {
  Decompose(request: DecomposeOptions): Promise<SBOMDecomposition>;
  Upload(request: UploadOptions): Promise<Revision>;
}

export const SbomServiceServiceName = "cyclonedx_ui.sbom.v1.SbomService";
export class SbomServiceClientImpl implements SbomService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SbomServiceServiceName;
    this.rpc = rpc;
    this.Decompose = this.Decompose.bind(this);
    this.Upload = this.Upload.bind(this);
  }
  Decompose(request: DecomposeOptions): Promise<SBOMDecomposition> {
    const data = DecomposeOptions.encode(request).finish();
    const promise = this.rpc.request(this.service, "Decompose", data);
    return promise.then((data) => SBOMDecomposition.decode(new BinaryReader(data)));
  }

  Upload(request: UploadOptions): Promise<Revision> {
    const data = UploadOptions.encode(request).finish();
    const promise = this.rpc.request(this.service, "Upload", data);
    return promise.then((data) => Revision.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
